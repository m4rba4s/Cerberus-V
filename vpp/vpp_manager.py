#!/usr/bin/env python3
# SPDX-License-Identifier: Apache-2.0
# Author: vppebpf  Date: 2025-06-26
# VPP Manager: Production-grade dual protection eBPF + VPP integration

import os
import sys
import time
import json
import subprocess
import logging
from pathlib import Path
from typing import Dict, List, Optional, Tuple
from dataclasses import dataclass
from enum import Enum

# Add project root to path
sys.path.append(str(Path(__file__).parent.parent))

logger = logging.getLogger(__name__)

class VPPStatus(Enum):
    """VPP –ø—Ä–æ—Ü–µ—Å—Å —Å—Ç–∞—Ç—É—Å"""
    STOPPED = "stopped"
    STARTING = "starting"
    RUNNING = "running"
    ERROR = "error"
    SIMULATION = "simulation"

class ProtectionMode(Enum):
    """–†–µ–∂–∏–º—ã –¥–≤–æ–π–Ω–æ–π –∑–∞—â–∏—Ç—ã"""
    EBPF_ONLY = "ebpf_only"          # –¢–æ–ª—å–∫–æ eBPF/XDP
    VPP_ONLY = "vpp_only"            # –¢–æ–ª—å–∫–æ VPP datapath  
    DUAL_PROTECTION = "dual"          # eBPF + VPP (—Ç–æ–ø–æ–≤—ã–π —Ä–µ–∂–∏–º)
    SIMULATION = "simulation"         # –°–∏–º—É–ª—è—Ü–∏—è –¥–ª—è demo

@dataclass
class VPPConfig:
    """VPP –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è"""
    startup_conf: str = "/etc/vpp/startup.conf"
    api_socket: str = "/run/vpp/api.sock"
    cli_socket: str = "/run/vpp/cli.sock"
    interface: str = "vpp-ebpf-0"
    dpdk_enabled: bool = False
    plugins: List[str] = None
    
    def __post_init__(self):
        if self.plugins is None:
            self.plugins = ["ebpf_plugin.so", "acl_plugin.so"]

@dataclass 
class VPPStats:
    """VPP —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
    packets_received: int = 0
    packets_dropped: int = 0
    packets_processed: int = 0
    graph_node_calls: int = 0
    ebpf_map_hits: int = 0
    uptime_seconds: int = 0
    
class VPPManager:
    """
    VPP Manager –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å eBPF firewall
    
    –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:
    eBPF/XDP -> fast path (ICMP drop, DDoS protection)
    VPP -> stateful processing (ACL, DPI, connection tracking)
    """
    
    def __init__(self, config: VPPConfig = None, demo_mode: bool = False):
        self.config = config or VPPConfig()
        self.demo_mode = demo_mode or os.getenv("DEMO_MODE", "false").lower() == "true"
        self.status = VPPStatus.SIMULATION if self.demo_mode else VPPStatus.STOPPED
        self.protection_mode = ProtectionMode.SIMULATION if self.demo_mode else ProtectionMode.EBPF_ONLY
        self.stats = VPPStats()
        self.start_time = time.time()
        
        # Shared BPF maps —Å eBPF
        self.shared_maps = {
            "acl_v4": "/sys/fs/bpf/vpp_acl_v4",
            "acl_v6": "/sys/fs/bpf/vpp_acl_v6", 
            "stats": "/sys/fs/bpf/vpp_stats",
            "session_table": "/sys/fs/bpf/vpp_sessions"
        }
        
        logger.info(f"VPP Manager initialized: demo_mode={self.demo_mode}, mode={self.protection_mode.value}")
    
    def is_vpp_available(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ VPP –≤ —Å–∏—Å—Ç–µ–º–µ"""
        if self.demo_mode:
            return True
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ VPP binary
        try:
            result = subprocess.run(["which", "vpp"], capture_output=True, text=True)
            if result.returncode == 0:
                return True
        except:
            pass
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ systemctl
        try:
            result = subprocess.run(["systemctl", "status", "vpp"], capture_output=True, text=True)
            return "could not be found" not in result.stderr
        except:
            pass
            
        return False
    
    def start_vpp(self) -> bool:
        """–ó–∞–ø—É—Å–∫ VPP –ø—Ä–æ—Ü–µ—Å—Å–∞"""
        if self.demo_mode:
            logger.info("üé≠ VPP –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ —Å–∏–º—É–ª—è—Ü–∏–∏")
            self.status = VPPStatus.RUNNING
            self.protection_mode = ProtectionMode.SIMULATION
            self._simulate_vpp_startup()
            return True
            
        if not self.is_vpp_available():
            logger.warning("VPP –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ, –ø–µ—Ä–µ–∫–ª—é—á–∞—é—Å—å –Ω–∞ eBPF-only —Ä–µ–∂–∏–º")
            self.protection_mode = ProtectionMode.EBPF_ONLY
            return True
            
        try:
            logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞—é VPP –¥–ª—è –¥–≤–æ–π–Ω–æ–π –∑–∞—â–∏—Ç—ã...")
            self.status = VPPStatus.STARTING
            
            # –°–æ–∑–¥–∞—ë–º startup.conf –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å eBPF
            self._create_startup_config()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º VPP –ø—Ä–æ—Ü–µ—Å—Å
            cmd = ["sudo", "vpp", "-c", self.config.startup_conf]
            result = subprocess.run(cmd, capture_output=True, text=True, timeout=10)
            
            if result.returncode == 0:
                self.status = VPPStatus.RUNNING
                self.protection_mode = ProtectionMode.DUAL_PROTECTION
                logger.info("‚úÖ VPP –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ - –î–í–û–ô–ù–ê–Ø –ó–ê–©–ò–¢–ê –ê–ö–¢–ò–í–ù–ê!")
                
                # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º shared BPF maps
                self._setup_shared_maps()
                return True
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ VPP: {result.stderr}")
                self.status = VPPStatus.ERROR
                return False
                
        except subprocess.TimeoutExpired:
            logger.error("Timeout –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ VPP")
            self.status = VPPStatus.ERROR
            return False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ VPP: {e}")
            self.status = VPPStatus.ERROR
            return False
    
    def stop_vpp(self) -> bool:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ VPP –ø—Ä–æ—Ü–µ—Å—Å–∞"""
        if self.demo_mode:
            logger.info("üé≠ VPP –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (—Å–∏–º—É–ª—è—Ü–∏—è)")
            self.status = VPPStatus.STOPPED
            return True
            
        try:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —á–µ—Ä–µ–∑ systemctl –∏–ª–∏ killall
            subprocess.run(["sudo", "systemctl", "stop", "vpp"], timeout=5)
            subprocess.run(["sudo", "killall", "-TERM", "vpp"], capture_output=True)
            
            self.status = VPPStatus.STOPPED
            self.protection_mode = ProtectionMode.EBPF_ONLY
            logger.info("VPP –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ eBPF-only —Ä–µ–∂–∏–º")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ VPP: {e}")
            return False
    
    def get_status(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ VPP"""
        self._update_stats()
        
        return {
            "status": self.status.value,
            "protection_mode": self.protection_mode.value,
            "dual_protection_active": self.protection_mode == ProtectionMode.DUAL_PROTECTION,
            "uptime": int(time.time() - self.start_time),
            "stats": {
                "packets_received": self.stats.packets_received,
                "packets_dropped": self.stats.packets_dropped,
                "packets_processed": self.stats.packets_processed,
                "ebpf_map_hits": self.stats.ebpf_map_hits,
                "graph_node_calls": self.stats.graph_node_calls
            },
            "shared_maps": self._check_shared_maps(),
            "interfaces": self._get_vpp_interfaces()
        }
    
    def execute_cli(self, command: str) -> str:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ VPP CLI –∫–æ–º–∞–Ω–¥—ã"""
        if self.demo_mode:
            return self._simulate_cli_command(command)
            
        try:
            if self.status != VPPStatus.RUNNING:
                return "ERROR: VPP –Ω–µ –∑–∞–ø—É—â–µ–Ω"
                
            # –í—ã–ø–æ–ª–Ω—è–µ–º —á–µ—Ä–µ–∑ vppctl
            result = subprocess.run(
                ["sudo", "vppctl", command], 
                capture_output=True, text=True, timeout=5
            )
            
            if result.returncode == 0:
                return result.stdout.strip()
            else:
                return f"ERROR: {result.stderr}"
                
        except Exception as e:
            return f"ERROR: {str(e)}"
    
    def _create_startup_config(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ startup.conf –¥–ª—è eBPF –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
        config_dir = Path(self.config.startup_conf).parent
        config_dir.mkdir(parents=True, exist_ok=True)
        
        config_content = f"""
# VPP startup configuration for eBPF integration
# Generated by vppebpf manager

unix {{
  nodaemon
  log {config_dir}/vpp.log
  full-coredump
  cli-listen {self.config.cli_socket}
  gid vpp
}}

api-trace {{
  on
}}

api-segment {{
  gid vpp
}}

cpu {{
  main-core 1
  corelist-workers 2-3
}}

# eBPF plugin configuration
plugins {{
  plugin ebpf_plugin.so {{ enable }}
  plugin acl_plugin.so {{ enable }}
}}

# Shared memory –¥–ª—è eBPF –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
ebpf {{
  shared-maps-path /sys/fs/bpf/
  integration-mode dual-protection
}}

# Interface configuration –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å XDP
interfaces {{
  name {self.config.interface}
  mode ebpf-integration
}}

# ACL configuration —á–µ—Ä–µ–∑ shared BPF maps
acl {{
  ebpf-maps-integration enable
  shared-table-path /sys/fs/bpf/vpp_acl_v4
}}
"""
        
        with open(self.config.startup_conf, 'w') as f:
            f.write(config_content)
        
        logger.info(f"VPP startup.conf —Å–æ–∑–¥–∞–Ω: {self.config.startup_conf}")
    
    def _setup_shared_maps(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ shared BPF maps –º–µ–∂–¥—É eBPF –∏ VPP"""
        try:
            # –°–æ–∑–¥–∞—ë–º pinned maps –¥–ª—è –æ–±–º–µ–Ω–∞ –¥–∞–Ω–Ω—ã–º–∏
            for map_name, map_path in self.shared_maps.items():
                map_dir = Path(map_path).parent
                map_dir.mkdir(parents=True, exist_ok=True)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ map
                if not Path(map_path).exists():
                    logger.info(f"–°–æ–∑–¥–∞—é shared map: {map_name} -> {map_path}")
                    # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ BPF map
                    
            logger.info("‚úÖ Shared BPF maps –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ shared maps: {e}")
    
    def _check_shared_maps(self) -> Dict:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è shared BPF maps"""
        maps_status = {}
        
        for map_name, map_path in self.shared_maps.items():
            exists = Path(map_path).exists() if not self.demo_mode else True
            maps_status[map_name] = {
                "path": map_path,
                "exists": exists,
                "entries": self._get_map_entries(map_path) if exists else 0
            }
        
        return maps_status
    
    def _get_map_entries(self, map_path: str) -> int:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø–∏—Å–µ–π –≤ BPF map"""
        if self.demo_mode:
            return hash(map_path) % 100  # –°–∏–º—É–ª—è—Ü–∏—è
            
        try:
            # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ - bpftool map dump
            result = subprocess.run(
                ["sudo", "bpftool", "map", "dump", "pinned", map_path],
                capture_output=True, text=True
            )
            if result.returncode == 0:
                return len(result.stdout.strip().split('\n')) - 1
        except:
            pass
        return 0
    
    def _get_vpp_interfaces(self) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ VPP –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤"""
        if self.demo_mode:
            return [
                {
                    "name": "vpp-ebpf-0",
                    "state": "up",
                    "mode": "ebpf-integration",
                    "rx_packets": 15420,
                    "tx_packets": 8945,
                    "drops": 125
                },
                {
                    "name": "memif0/0", 
                    "state": "up",
                    "mode": "memif",
                    "rx_packets": 8234,
                    "tx_packets": 7891,
                    "drops": 12
                }
            ]
        
        interfaces = []
        output = self.execute_cli("show interface")
        
        # –ü–∞—Ä—Å–∏–Ω–≥ –≤—ã–≤–æ–¥–∞ show interface
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ø–æ–ª–Ω—ã–π –ø–∞—Ä—Å–µ—Ä
        
        return interfaces
    
    def _update_stats(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ VPP"""
        if self.demo_mode:
            # –°–∏–º—É–ª—è—Ü–∏—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
            uptime = int(time.time() - self.start_time)
            base_rate = 1000  # –ø–∞–∫–µ—Ç–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É
            
            self.stats.packets_received = uptime * base_rate + (hash(str(time.time())) % 500)
            self.stats.packets_processed = int(self.stats.packets_received * 0.98)
            self.stats.packets_dropped = self.stats.packets_received - self.stats.packets_processed
            self.stats.graph_node_calls = self.stats.packets_processed * 3
            self.stats.ebpf_map_hits = int(self.stats.packets_received * 0.75)
            self.stats.uptime_seconds = uptime
            
        else:
            # –†–µ–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑ VPP API
            self.stats.uptime_seconds = int(time.time() - self.start_time)
    
    def _simulate_vpp_startup(self):
        """–°–∏–º—É–ª—è—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ VPP"""
        logger.info("üé≠ –°–∏–º—É–ª—è—Ü–∏—è VPP startup:")
        logger.info("  - –ó–∞–≥—Ä—É–∂–µ–Ω ebpf_plugin.so")
        logger.info("  - –ó–∞–≥—Ä—É–∂–µ–Ω acl_plugin.so") 
        logger.info("  - –ù–∞—Å—Ç—Ä–æ–µ–Ω—ã shared BPF maps")
        logger.info("  - –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å vpp-ebpf-0 –∞–∫—Ç–∏–≤–µ–Ω")
        logger.info("  - –î–í–û–ô–ù–ê–Ø –ó–ê–©–ò–¢–ê –∞–∫—Ç–∏–≤–Ω–∞ (—Å–∏–º—É–ª—è—Ü–∏—è)")
    
    def _simulate_cli_command(self, command: str) -> str:
        """–°–∏–º—É–ª—è—Ü–∏—è VPP CLI –∫–æ–º–∞–Ω–¥"""
        if "show interface" in command:
            return """
              Name               Idx    State  MTU (L3/IP4/IP6/MPLS)     Counter          Count     
vpp-ebpf-0                      1      up          9000/9000/9000/9000   rx packets                15420
                                                                         rx bytes                1854240
                                                                         tx packets                 8945
                                                                         tx bytes                1073400
                                                                         drops                       125
memif0/0                        2      up          9000/9000/9000/9000   rx packets                 8234
                                                                         rx bytes                 988080
"""
        elif "show ebpf" in command:
            return """
eBPF Integration Status:
  Mode: dual-protection
  Shared Maps: 4 active
  XDP Program: attached
  Map Synchronization: active
  Packets processed: 15420
  Map hits: 11565
"""
        elif "show acl" in command:
            return """
ACL Plugin Status:
  eBPF Integration: enabled
  Shared table path: /sys/fs/bpf/vpp_acl_v4
  Rules synchronized: 15
  Packets matched: 8945
"""
        else:
            return f"VPP CLI (simulation): {command}\n–û–ö"

# Factory function –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è VPP Manager
def create_vpp_manager(demo_mode: bool = None) -> VPPManager:
    """–°–æ–∑–¥–∞–Ω–∏–µ VPP Manager —Å –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º —Ä–µ–∂–∏–º–∞"""
    if demo_mode is None:
        demo_mode = os.getenv("DEMO_MODE", "false").lower() == "true"
    
    config = VPPConfig()
    manager = VPPManager(config, demo_mode)
    
    return manager

if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ VPP Manager
    logging.basicConfig(level=logging.INFO)
    
    manager = create_vpp_manager(demo_mode=True)
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ VPP Manager:")
    print(f"VPP –¥–æ—Å—Ç—É–ø–µ–Ω: {manager.is_vpp_available()}")
    
    print("\nüöÄ –ó–∞–ø—É—Å–∫ VPP...")
    success = manager.start_vpp()
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {success}")
    
    print("\nüìä –°—Ç–∞—Ç—É—Å VPP:")
    status = manager.get_status()
    print(json.dumps(status, indent=2, ensure_ascii=False))
    
    print("\nüíª CLI –∫–æ–º–∞–Ω–¥—ã:")
    print(manager.execute_cli("show interface"))
    print(manager.execute_cli("show ebpf"))
    
    print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ VPP...")
    manager.stop_vpp() 